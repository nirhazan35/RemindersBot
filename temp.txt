import os
import datetime
import pytz
import caldav
from twilio.rest import Client
import schedule
import time
from dotenv import load_dotenv

class CalendarReminderBot:
    def __init__(self):
        # Load environment variables
        load_dotenv()

        # Calendar Credentials
        self.calendar_url = 'https://caldav.icloud.com'
        self.username = os.getenv('CALENDAR_USERNAME')
        self.password = os.getenv('CALENDAR_PASSWORD')

        # Twilio Credentials
        self.twilio_client = Client(
            os.getenv('TWILIO_ACCOUNT_SID'), 
            os.getenv('TWILIO_AUTH_TOKEN')
        )
        self.twilio_number = os.getenv('TWILIO_PHONE_NUMBER')

        # Timezone
        self.timezone = pytz.timezone(os.getenv('TIMEZONE', 'America/New_York'))

    def get_tomorrow_appointments(self):
        """Retrieve appointments for tomorrow"""
        try:
            # Connect to CalDAV
            client = caldav.DAVClient(
                url=self.calendar_url, 
                username=self.username, 
                password=self.password
            )
            principal = client.principal()
            calendars = principal.calendars()

            # Get tomorrow's date
            tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            
            # Search for events
            appointments = []
            for calendar in calendars:
                events = calendar.date_search(
                    start=datetime.datetime.combine(tomorrow, datetime.time.min),
                    end=datetime.datetime.combine(tomorrow, datetime.time.max)
                )
                appointments.extend(events)

            return appointments

        except Exception as e:
            print(f"Error retrieving appointments: {e}")
            return []

    def send_whatsapp_reminder(self, appointment):
        """Send WhatsApp reminder for an appointment"""
        try:
            # Extract relevant appointment details
            # Note: You'll need to customize this based on how you store customer contact info
            message = self.twilio_client.messages.create(
                from_=f'whatsapp:{self.twilio_number}',
                body=f"Reminder: You have an appointment tomorrow - {appointment.summary}",
                to='whatsapp:+CUSTOMER_PHONE_NUMBER'  # Replace with actual customer number
            )
            print(f"Reminder sent for {appointment.summary}")
        except Exception as e:
            print(f"Error sending reminder: {e}")

    def run_daily_check(self):
        """Daily routine to check appointments and send reminders"""
        print("Checking appointments...")
        appointments = self.get_tomorrow_appointments()
        
        for appointment in appointments:
            self.send_whatsapp_reminder(appointment)

def main():
    bot = CalendarReminderBot()
    
    # Schedule daily check
    schedule.every().day.at("20:00").do(bot.run_daily_check)

    print("Bot is running. Checking appointments daily at 8 PM...")
    
    # Keep the script running
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    main()